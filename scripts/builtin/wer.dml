#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# This built-in function computes the word error rate (WER)
# defined as wer = (numSubst + numDel + numIns) / length(r)
#
# INPUT:
# ------------------------------------------------------------------------------
# R     Input frame of reference strings, shape: [N x 1]
# H     Input frame of hypothesis strings, shape: [N x 1]
# ------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------
# W     Output matrix of word error rate per pair of strings,
#       shape: [N x 1], where W[i,1] = wer(R[i,1], H[i,1])
# ------------------------------------------------------------------------------

f_wer = function(Frame[String] R, Frame[String] H)
  return (Matrix[Double] W)
{
  F = cbind(R, H);
  T = map(F, "x -> new String[]{String.valueOf(UtilFunctions.getWordErrorRate(x[0], x[1])),\"\"}", margin=1);
  W = as.matrix(T[,1]);
}
